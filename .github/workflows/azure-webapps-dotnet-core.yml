# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and Deploy - EatagramApi

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  Creates-Artifact:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"
          include-prerelease: true

      - name: Restore with dotnet
        run: dotnet restore ./Eatagram

      - name: Build with dotnet
        run: dotnet build ./Eatagram/Eatagram.Core.Api/Eatagram.Core.Api.csproj --configuration Release --no-restore
        
      - name: Test RecipesController
        run: dotnet test ./Eatagram/Eatagram.Core.Api.Tests --filter Eatagram.Core.Api.Tests.RecipeControllerTest  --no-restore --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Test CommentController
        run: dotnet test ./Eatagram/Eatagram.Core.Api.Tests --filter Eatagram.Core.Api.Tests.CommentControllerTests  --no-restore --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Copy Coverage To Predictable Location
        run: cp coverage/**/coverage.cobertura.xml coverage.cobertura.xml

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.2.0
        with:
          filename: coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Dotnet publish
        run: dotnet publish ./Eatagram/Eatagram.Core.Api/Eatagram.Core.Api.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
  

  Deployment:
    runs-on: windows-latest
    needs: Creates-Artifact
    environment:
      name: "production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "EatagramApi"
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_APP_SERVICE }}
          package: .
